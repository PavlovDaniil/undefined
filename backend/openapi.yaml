openapi: 3.1.9
info:
  title: Petstore API (example)
  description: |-
    REST API для управления магазином домашних животных, пользователями и постами.
    Включает операции с заказами, пользователями и пользовательскими постами.
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.local
    url: https://petstore.local/support
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

externalDocs:
  description: Find out more about Swagger
  url: https://swagger.io

servers:
  - url: https://api.petstore.local/v1
    description: Production server
  - url: https://staging.petstore.local/v1
    description: Staging server

tags:
  - name: store
    description: Операции с заказами (создание, просмотр, удаление).
  - name: user
    description: Управление пользователями (регистрация, логин, обновление, удаление).
  - name: posts
    description: Работа с постами пользователей (создание, получение списка).

paths:
  /store/inventory:
    get:
      tags:
        - store
      summary: Получить инвентарь по статусу
      description: Возвращает карту статусов к количеству товаров.
      operationId: getInventory
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
              example:
                available: 23
                sold: 5
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      security:
        - api_key: []

  /store/order:
    post:
      tags:
        - store
      summary: Создать заказ
      description: Разместить новый заказ в магазине.
      operationId: placeOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Заказ успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Неверные входные данные
        '422':
          description: Ошибка валидации
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Получить заказ по ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Неверный ID
        '404':
          description: Заказ не найден
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - store
      summary: Удалить заказ по ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID заказа
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Заказ удалён
        '400':
          description: Неверный ID
        '404':
          description: Заказ не найден
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user:
    post:
      tags:
        - user
      summary: Создать пользователя
      operationId: createUser
      requestBody:
        description: Новый пользователь
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/login:
    get:
      tags:
        - user
      summary: Авторизация пользователя
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: Логин
          schema:
            type: string
        - name: password
          in: query
          description: Пароль
          schema:
            type: string
      responses:
        '200':
          description: Успешный вход
          headers:
            X-Rate-Limit:
              description: Количество вызовов в час
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: Дата истечения токена
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
              example: "token_123"
        '400':
          description: Неверные логин или пароль
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/logout:
    get:
      tags:
        - user
      summary: Выход из системы
      operationId: logoutUser
      responses:
        '200':
          description: Успешный выход
        default:
          description: Ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user/{username}:
    get:
      tags:
        - user
      summary: Получить пользователя по имени
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: Имя пользователя
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешная операция
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Пользователь не найден
    put:
      tags:
        - user
      summary: Обновить пользователя
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Новые данные пользователя
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Пользователь обновлён
        '404':
          description: Пользователь не найден
    delete:
      tags:
        - user
      summary: Удалить пользователя
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: Имя пользователя
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Пользователь удалён
        '404':
          description: Пользователь не найден

  /posts:
    get:
      tags:
        - posts
      summary: Получить список постов
      operationId: getPosts
      parameters:
        - name: username
          in: query
          description: Фильтр по имени пользователя
          schema:
            type: string
      responses:
        '200':
          description: Список постов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: Посты не найдены
    post:
      tags:
        - posts
      summary: Создать новый пост
      operationId: createPost
      requestBody:
        description: Данные нового поста
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Пост успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Статус заказа
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: Статус пользователя
          format: int32
          example: 1
      xml:
        name: user

    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        author:
          type: string
          example: "theUser"
        content:
          type: string
          example: "Hello world!"
        createdAt:
          type: string
          format: date-time
          example: "2025-09-23T12:34:56Z"

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            "write:pets": modify pets in your account
            "read:pets": read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header

security:
  - api_key: []
